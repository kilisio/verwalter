import {go} from 'khufu-routing'
import {plain, refresher, fast_refresh_json, json} from './middleware/request'
import json_store from './stores/json'
import text_store from './stores/text'
import {value, toggle, init, bool} from './stores/simple'
import {set_port} from './util/port'
import {is_leader} from './util/status'
import {format_error_hint, format_error_badge} from './util/format_err'
import * as self_meter from './blocks/self_meter.khufu'
import * as metrics from './blocks/metrics.khufu'
import {status} from './graphql'

import {main as roles} from './pages/roles.khufu'
import {main as api_links} from './pages/api_links.khufu'
import {main as peers} from './pages/peers.khufu'
import {main as services} from './pages/services.khufu'
import {main as logs} from './pages/logs.khufu'
import {main as backups} from './pages/backups.khufu'
import {main as tail} from './pages/tail.khufu'

style:
  .subtext
    font-size: xx-small
  // This is needed to override bootstrap's styles
  a.error-status.error-status
    color: red
    font-weight: bold
    font-size: 120%
  .red
    color: red
    font-weight: bold

view _navbar(status, frontend_version, @expert_mode, router):
  <nav.navbar.navbar-default>
    <div.container-fluid>
      <div.navbar-header>
        <a.navbar-brand.red?(status.leader.debugForced) href=router.rel('/')>
          "Verwalter"
          if status.leader.debugForced:
            <div.subtext.red>
              "Debugging Version With A Forced Leader"
          else:
            <div.subtext.text-muted>
              frontend_version
              " / "
              status and status.version or "???"
      <div.collapse.navbar-collapse>
        <ul.nav.navbar-nav>
          <li.active?(router.at('roles'))>
            <a href=router.rel("/roles")>
              link {click} go(event) -> @router
              "Roles"
              if status:
                ` [${status.roles}]`
          <li.active?(router.at('peers'))>
            <a href=router.rel("/peers")>
              link {click} go(event) -> @router
              "Servers"
              if status:
                ` [${status.peers.number}]`
          <li.active?(router.at('services'))>
            <a href=router.rel("/services")>
              link {click} go(event) -> @router
              "Services"
          <li.active?(router.at('api_links'))>
            <a href=router.rel("/api_links")>
              link {click} go(event) -> @router
              "API Links"
          <li.active?(router.at('logs'))>
            <a href=router.rel("/logs")>
              link {click} go(event) -> @router
              "Logs"
          if @expert_mode:
            <li.active?(router.at('backups'))>
              <a href=router.rel("/backups")>
                link {click} go(event) -> @router
                "Backups"
        <ul.nav.navbar-nav.navbar-right>
          store @self_meter = bool | init(false)

          <li.dropdown.open?(@self_meter)>
            if status.self_report:
              <a.dropdown-toggle href="#" role="button"
                  aria-haspopup="true" aria-expanded="false">
                link {click} toggle(@self_meter) -> @self_meter

                self_meter.small(status.self_report, status.threads_report)
                <span.caret>
              if @self_meter:
                 <div.dropdown-menu>
                  self_meter.big(status.self_report, status.threads_report)

          <li>
            let on = @expert_mode
            <label>
              <input.ios-switch.bigswitch.blue?(on)
                type="checkbox" value='ok' checked=on title="Expert mode">
                link {click} toggle(on) -> @expert_mode
              <div>
                <div>

          store @log_visible = bool | init(false)

          if is_leader(status):
            <li.dropdown.open?(@log_visible)>
              <a.dropdown-toggle href="#" role="button"
                  aria-haspopup="true" aria-expanded="false">
                link {click} toggle(@log_visible) -> @log_visible
                "Log"
                <span.caret>
              if @log_visible:
                <div.dropdown-menu>
                  store @log_data = text_store | refresher
                    | plain('/v1/scheduler_debug_info')
                  <pre>
                    @log_data

          store @metrics = bool | init(false)

          <li.dropdown.open?(@metrics)>
            <a.dropdown-toggle href="#" role="button"
                aria-haspopup="true" aria-expanded="false">
              link {click} toggle(@metrics) -> @metrics
              "M"
              <span.caret>
            if @metrics and status.metrics:
               <div.dropdown-menu>
                metrics.expanded(status)

          if status.default_frontend != 'common':
            <li>
              <a href=`/~${status.default_frontend}/`>
                <span.glyphicon.glyphicon-new-window>
          if status.errors:
            <li.text-danger>
              <a.error-status href="/v1/status.pretty">
                `${ status.errors } errors`
          if status and status.leader:
            <li>
              let url = (set_port(status.leader.name, status.leader.addr)
                         + '/' +  router.tail())
              <a.navbar-brand href=url>
                status.leader.name
                <div.subtext.text-muted>
                  status.fetch.state.toLowerCase()
                  ": "
                  status.scheduleStatus
          elif status:
            <li.muted>
              <a.navbar-brand href="/v1/election">
                "No leader"
                <div.subtext.text-muted>
                  status.scheduleStatus
          else:
            <li.muted>
              <a.navbar-brand href="/v1/election">
                "Loading..."

view main(router, version):
  <div>
    store @expert_mode = bool | init(false)
    _navbar(status, version, expert_mode, router)
    <div class="container-fluid">
      if let sub = router.at('roles'):
        roles(status, @expert_mode, sub)
      elif let sub = router.at('role'):
        roles(status, @expert_mode, sub)
      elif let sub = router.at('api_links'):
        api_links(status, @expert_mode, sub)
      elif let sub = router.at('peers'):
        peers(status, @expert_mode, sub)
      elif let sub = router.at('services'):
        services(status, @expert_mode, sub)
      elif let sub = router.at('logs'):
        logs(status, @expert_mode, sub)
      elif let sub = router.at('backups'):
        backups(status, @expert_mode, sub)
      elif let sub = router.at('tail'):
        tail(status, @expert_mode, sub)
