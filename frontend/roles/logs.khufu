import {refresher} from '../middleware/request'
import {repr} from '../util/object'
import {enumerate} from '../util/iter'
import {go, set as setq} from 'khufu-routing'
import {role_messages, fetch_indexes, log_path_off} from '../stores/logs'
import {value, bool, set, init, toggle} from '../stores/simple'


style:
  td.id
    width: 16px
    font-family: Hack, monospace
    overflow: hidden
    text-overflow: ellipsis


view logs(role_name, router):
  <div>
    store @show = router.query('logs')
    <h2>
      "Logs "
      <button.btn.btn-default.btn-xs>
        link {click} setq(@show ? '' : 'true') -> @show
        if @show:
          <span.glyphicons.glyphicon-minus>
        else:
          <span.glyphicons.glyphicon-plus>
    if @show:
      <table.table.table-hover>
        store @index = role_messages(role_name) | refresher | fetch_indexes
        <thead>
          <tr>
            <th> "Time"
            <th.id> "Id"
            <th> "Log"
        <tbody>
          if @index.deploys:
            for [dep_id, dep] of @index.deploys.entries() key dep_id:
              <tr>
                <td>
                  (dep.start or dep.finish)[0]
                <td.id>
                  dep_id
                <td>
                  if dep.start and dep.finish:
                    let bytes = dep.finish[2].fields[2] - dep.start[2].fields[2]
                    let [path, pos] = log_path_off(dep.start[2])
                    <a href=router.rel(`/tail/${ path }`)
                       title=`${ path } at ${ pos }`>
                      link {click} go(event) -> @router
                      `render(${ bytes }b)`
                  for [i, pair] of enumerate(dep.externals.entries()) key pair[0]:
                    let [path, pos] = log_path_off(pair[1][2])
                    <a href=router.rel(`/tail/${ path }`)
                       title=`${ path } at ${ pos }`>
                      link {click} go(event) -> @router
                      ` [${ i+1 }]`
