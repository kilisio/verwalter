import {progress} from './pipeline.khufu'
import {step_and_index} from '../../util/update'
import {is_leader} from '../../util/status'
import {value, bool, set, init, toggle, disable} from '../../stores/simple'
import {sample, repr} from './sample.khufu'
import {execute} from '../../util/action'
import {show_progress} from '../../blocks/action.khufu'

style:
  .title-addon
    cursor: pointer
    font-size: 50%
    margin-left: 8px
    color: gray
    display: inline-flex
    flex-direction: column
    align-items: center
  .step-name
    white-space: nowrap
  .substep
    margin-left: 4px
  .paused
    color: red
    font-weight: bold
    font-size: 120%
    margin: 4px

view action_button(action, icon, color, @actions, {group_name, role_name}):
  let req = {button: {
    action: 'update_action',
    role: role_name,
    group: group_name,
    update_action: action,
  }}
  <button.btn class=`btn-${color}`>
    <span.glyphicon class=`glyphicon-${icon}`>
    link {click} execute(req) -> @actions
    show_progress(@actions, req.button)

view update_buttons(up, @actions, kw):
  <div>
    let [step, step_idx] = step_and_index(up.pipeline, up.step)
    store @show_repr = bool | init(false)
    <div>
      <div.btn-group>

        if is_leader(kw.system_status):
          if up.direction == 'forward':
            if step.forward_mode == 'time' or step.forward_mode == 'smooth':
              action_button('pause', 'pause', 'default', -> @actions, kw)
            elif step.forward_mode == 'manual':
              action_button('forward', 'forward', 'default', -> @actions, kw)
            elif step.forward_mode == 'ack':
              action_button('revert', 'backward', 'default', -> @actions, kw)
          elif up.direction == 'backward':
            if step.backward_mode == 'time' or step.forward_mode == 'smooth':
              action_button('pause', 'pause', 'default', -> @actions, kw)
            elif step.backward_mode == 'manual':
              action_button('revert', 'backward', 'default', -> @actions, kw)
          else:
            action_button('revert', 'backward', 'danger', -> @actions, kw)
            action_button('resume', 'play', 'default', -> @actions, kw)
            action_button('skip', 'forward', 'danger', -> @actions, kw)

        <button.btn.btn-default>
          link {click} toggle(@show_repr) -> @show_repr
          <span.caret>

    if @show_repr:
      for action of ["pause", "revert", "resume", "skip", "ack"]:
        let action_req = {button: {
          action: 'update_action',
          role: kw.role_name,
          group: kw.group_name,
          update_action: action,
        }}
        sample(`Action ${ action }`, action_req, kw.system_status)

      <div>
        repr("Update Info", up)

view show_update({group, gname, role, role_name, system_status},
                  @actions):
  let up = group.update
  <div>
    <h3>
      "Update in progress "
      <span>
        "["
        up.source_ver
        " → "
        up.target_ver
        "]"

    progress(up)

    update_buttons(up, -> @actions,
      {system_status: system_status, group_name: gname, role_name: role_name})


view show_title(group):
  let up = group.update
  let [step, step_idx] = step_and_index(up.pipeline, up.step)
  <div.title-addon>
    <div.versions>
      "["
      up.source_ver
      " → "
      up.target_ver
      "]"
      if up.direction != 'forward':
        <spah.paused>
          up.direction
    <div.step-name>
      up.step
      if up.smooth_step:
        <span.substep>
          up.smooth_step
          " / "
          step.substeps
