import {entries_sorted, repr, pretty_json} from '../../util/object'
import {value, bool, set, init, toggle} from '../../stores/simple'
import {section} from '../../blocks/title.khufu'
import {main as versions} from '../../blocks/version_select.khufu'
import {execute} from '../../util/action'
import {show_action_progress} from '../../blocks/action.khufu'

style:
  .version
    color: gray
    font-size: 75%
    margin-left: 8px

view main(role, role_name, role_state, @actions, {servers}):
  for [gname, group] of entries_sorted(role_state.groups) key gname:
    section():
      title:
        gname
        <span.version>
          group.version
      body:
        <div>
          store @version = value | init('')
          store @delete_confirm = value | init(false)
          <h3> "Services"
          for [sname, service] of entries_sorted(group.services) key sname:
            <h4> sname
            <table.table.table-hover>
              <thead>
                <tr>
                  <th> "Property"
                  <th> "Value"
              <tbody>
                for [name, value] of entries_sorted(service) key name:
                  <tr>
                    <td>
                      name
                    <td>
                      repr(value)
          <h3> "Update"
          if not group.auto_update:
            let start_call = {"button": {
              role: role_name,
              group: gname,
              action: "start_update",
              to_version: @version,
            }}
            let force_call = {"button": {
              role: role_name,
              group: gname,
              action: "force_version",
              to_version: @version,
            }}
            <p>
              versions(role, -> @version)
            <p>
              <div.btn-group>
                <button.btn.btn-success disabled=(@version ? null : "1")>
                  link {click} execute(start_call) -> @actions
                  "Start Update"
                  show_action_progress("start_update", @actions)
                <button.btn.btn-danger disabled=(@version ? null : "1")>
                  link {click} execute(force_call) -> @actions
                  "Force Version"
                  show_action_progress("force_version", @actions)

            <h4> "Or via API"
            <pre>
              `curl http://localhost:8379 -XPOST -d '${pretty_json(start_call)}'`
            <pre>
              `curl http://localhost:8379 -XPOST -d '${pretty_json(force_call)}'`

          else: // auto-updates enabled

            <p align="right">
              <button.btn.btn-danger>
                link {click} execute({button: {
                  role: role_name,
                  group: gname,
                  action: group.auto_update
                    ? "disable_auto_update"
                    : "enable_auto_update",
                }}) -> @actions
                if group.auto_update:
                  "Disable Auto Update"
                else:
                  "Enable Auto Update"
                show_action_progress("enable_auto_update", @actions)
                show_action_progress("disable_auto_update", @actions)

          if @delete_confirm:
            let delete_call = {"button": {
              role: role_name,
              group: gname,
              action: "delete_group",
            }}
            <h4> "Delete via API"
            <pre>
              `curl http://localhost:8379 -XPOST -d '${pretty_json(delete_call)}'`
            <button.btn.btn-success>
              link {click} set(false) -> @delete_confirm
              "Oh, not now"
            " "
            <button.btn.btn-danger>
              link {click} execute(delete_call) -> @actions
              `Yes, delete group "${ gname }" of role "${ role_name }" for me`
              show_action_progress("delete_group", @actions)
          else:
            <p align="right">
              <button.btn.btn-danger>
                link {click} set(true) -> @delete_confirm
                "Delete This Group"
