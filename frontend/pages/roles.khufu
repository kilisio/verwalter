import {entries, repr, pretty, is_string} from '../util/object'
import {refresher, json} from '../middleware/request'
import json_store from '../stores/json'
import {preloader, action} from '../util/global_actions'
import {go, input} from 'khufu-routing'

// Frontend kinds
import {main as example} from '../roles/example.khufu'
import {main as version} from '../roles/version.khufu'
import {main as migration} from '../roles/migration.khufu'
import {main as api} from '../roles/api.khufu'

style:
  .frontend-kind
    float: right
    font-size: 40%
    font-family: monospace
  .nav
    display: flex
    flex-direction: column
  .bottom-button
    flex-grow: 1
    display: flex
    flex-direction: column
    justify-content: flex-end
    padding-bottom: 8px
  .canvas
    display: flex
  .wide
    width: 100%

view _leftmenu(schedule, router):
  <ul.nav.nav-pills.nav-stacked.col-lg-2>
    store @filter = router.query('role')
    <input value=@filter placeholder="Role filter">
      link {input} input(event) -> @filter
    if schedule and schedule.roles:
      for [name, role] of entries(schedule.roles) key name:
        if role.frontend and (not @filter or name.indexOf(@filter) >= 0):
          <li.active?(router.at(name)) role="presentation">
            <a href=router.rel(name)>
              link {click} go(event) -> @router
              name
              " "
              if role and role.badge:
                <span.badge>
                  role.badge
    <li.bottom-button>
      <button.btn.btn-danger.rerender>
        store @preloader = preloader
        link {click} action('force_render_all') -> @preloader
        "Rerender all roles"

view main(status, expert_mode, router):
  <div.canvas>
    store @schedule = json_store | refresher | json('/v1/schedule')
    _leftmenu(@schedule and @schedule.data, router)

    <div.wide>
      if not @schedule or not @schedule.data:
        <div.panel.panel-default>
          <div.panel-body>
            "Loading..."
      elif let [role_name, sub] = router.value():
        let schedule = @schedule.data
        let role = schedule.roles[role_name]
        let role_state = schedule.state and schedule.state[role_name]
        let frontend = (role and role.frontend and role.frontend.kind or
                        'example')
        <h1>
          role and role.title or role_name
          <span.frontend-kind>
            frontend
        if role:
          if frontend == 'example':
              example(role, role_name, {
                role_state: role_state,
                schedule: @schedule.data,
                system_status: status,
                expert_mode: expert_mode,
                router: sub,
              })
          elif frontend == 'version':
              version(role, role_name, {
                role_state: role_state,
                schedule: @schedule.data,
                system_status: status,
                expert_mode: expert_mode,
                router: sub,
              })
          elif frontend == 'migration':
              migration(role, role_name, {
                role_state: role_state,
                schedule: @schedule.data,
                system_status: status,
                expert_mode: expert_mode,
                router: sub,
              })
          elif frontend == 'api':
              api(role, role_name, {
                role_state: role_state,
                schedule: @schedule.data,
                system_status: status,
                expert_mode: expert_mode,
                router: sub,
              })
          else:
            <div.panel.panel-warning>
              <div.panel-body>
                "Unknown frontend "
                repr(frontend)

        else:
          <div.panel.panel-warning>
            <div.panel-body>
              "No schedule for this role yet."
      else:
        <div.panel.panel-default>
          <div.panel-body>
            "Select role on the left"
