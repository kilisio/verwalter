import {go, set, input} from 'khufu-routing'
import {refresher, json} from '../middleware/request'
import {format_uptime, format_diff, till_now_ms, from_ms} from '../util/time'
import {entries, keys, repr} from '../util/object'
import json_store from '../stores/json'
import {role_nodes} from '../util/services'
import {number_formatter} from '../util/format'
import {names_filter} from '../util/filters'


style:
  .nodes
    display: flex
    flex-direction: row
    flex-wrap: wrap
  .node
    margin: 4px
  .node
    width: 440px
    display: flex
    flex-direction: column
    border: solid 2px silver
    border-radius: 5px
    padding: 6px 12px
  .roles
    display: flex
    flex-direction: row
    flex-wrap: wrap
  .role
    margin: 5px
    font-size: 150%
    display: flex
    flex-direction: row
    align-items: center
  .role-name
    font-weight: bold
    padding-left: 4px
    padding-right: 4px
    white-space: nowrap
  .service
    padding-left: 6px
    padding-right: 6px
    font-family: monospace
    font-size: 60%
    white-space: nowrap
  .services
    display: flex
    flex-direction: row
    align-items: center
    flex-wrap: wrap
  .faded
    color: silver
  .multiplier
    color: green
    font-weight: bold
    padding-left: 2px
  h3
    margin-top: 0px
    font-size: 200%
    display: flex
    justify-content: space-between
  .padleft
    padding-left: 6px
  .panel
    max-width: 70ex
  .gauge-row, .num-row, .bad-row
    display: flex
  .si-key
    min-width: 15ex
  .si-value, .si-total
    text-align: right
    min-width: 4ex
    margin-right: 4px
  .gauge, .gauge-too-much
    width: 200px
    height: 16px
    margin-left: 8px
    border-radius: 2px
  .gauge
    background-color: #CCC
  .gauge-internal
    background-color: #2ca25f
    height: 16px
    border-bottom-left-radius: 2px
    border-top-left-radius: 2px
  .max
    background-color: red
    border-radius: 2px  /// all corners
  .gauge-too-much
    display: flex
    background-color: red
    align-items: center
    justify-content: center
  .value-too-much
    color: #B00
    font-weight: bold
    z-index: 1
    -webkit-text-stroke: 1px white
  .ref
    font-size: 50%
    cursor: pointer

view render_shortinfo(values):
  if values:
    <div.shortinfo>
      for item of values:
        if item[0] == 'gauge':
          <div.gauge-row>
            <span.si-key>
              item[1]
            <span.si-value>
              item[2]
            <span.si-separator> "/"
            <span.si-total>
              item[3]
            if item[2] <= item[3]:
              <div.gauge>
                  <div.gauge-internal.max?(item[2] >= item[3])
                    style={'width': (item[2]/item[3])*100 + '%'}>
            else:
              <div.gauge-too-much>
                <div.value-too-much style={
                    fontSize: (item[2]/item[3] * 100) + '%',
                }>
                  `${ number_formatter(1)(item[2]/item[3]) }Ã—`
        elif item[0] == 'num':
          <div.num-row>
            <span.si-key>
              item[1]
            <span.si-value>
              item[2]
        else:
          <pre.bad-row>
            repr(item)

view main(status, expert_mode, router):
  <div>
    store @by = router.query('by')
    store @empty = router.query('empty')
    store @filter = router.query('filter')
    <div.input-group.panel>
      <div.input-group-btn>
        <button.btn.btn-default.active?(@by == 'host' or not @by)>
          link {click} set('host') -> @by
          "By Host"
        <button.btn.btn-default.active?(@by == 'role')>
          link {click} set('role') -> @by
          "By Role"
        <button.btn.btn-default.active?(@empty == 'hide')>
          link {click} set(@empty == 'hide' ? '' : 'hide') -> @empty
          "Hide Empty"
      <input.form-control placeholder=`Filter ${@by}` value=@filter>
        link {input} input(this.value) -> @filter
      if @filter:
        <div.input-group-btn>
          <button.btn.btn-default>
            link {click} set('') -> @filter
            <span.glyphicon.glyphicon-remove>
    <div.nodes>
      store @schedule = json_store | refresher | json('/v1/schedule')
      if @schedule:
        if @by == 'host' or not @by:
          for [node_name, info] of entries(@schedule.data.nodes) key node_name:
            if names_filter(@filter, node_name):
              <div.node>
                <h3>
                  node_name
                <div.roles>
                  for [role_name, role] of entries(info.roles or {}) key role_name:
                    let daemons = entries(role.daemons or {})
                    if daemons.length > 0 or @empty != 'hide':
                      <span.role>
                        <span.role-name>
                          role_name
                        <span.faded>
                          "{"
                        <span.services>
                          for [d_name, daemon] of daemons key d_name:
                            if daemon.instances == 0:
                            elif daemon.instances == 1:
                              <span.service>
                                d_name
                            else:
                              <span.service>
                                d_name
                                <span.multiplier>
                                  `x${ daemon.instances }`
                        <span.faded>
                          "}"
                render_shortinfo(info.shortinfo)
        elif @by == 'role':
          for [role_name, role] of entries(@schedule.data.roles) key role_name:
            if names_filter(@filter, role_name):
              <div.node>
                let nodes = role_nodes(@schedule, role_name)
                let node_names = keys(nodes).join(',')
                <h3>
                  <span.title> role_name
                  <a.ref href=`/services?by=host&filter=${node_names}`>
                    link {click} go(event) -> @router
                    "#"
                <div.roles>
                  for [node_name, role] of entries(nodes) key node_name:
                    let daemons = entries(role.daemons or {})
                    if daemons.length > 0 or @empty != 'hide':
                      <span.role>
                        <span.role-name>
                          node_name
                        <span.faded>
                          "{"
                        <span.services>
                          for [d_name, daemon] of entries(role.daemons or {}) key d_name:
                            if daemon.instances == 0:
                            elif daemon.instances == 1:
                              <span.service>
                                d_name
                            else:
                              <span.service>
                                d_name
                                <span.multiplier>
                                  `x${ daemon.instances }`
                        <span.faded>
                          "}"
                render_shortinfo(role.shortinfo)
      else:
        "Loading..."
